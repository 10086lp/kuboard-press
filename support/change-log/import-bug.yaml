
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: dev
  name: svc-demo-task
  annotations:
    k8s.eip.work/workload: svc-demo-task
    deployment.kubernetes.io/revision: '7'
    k8s.eip.work/ingress: 'false'
    k8s.eip.work/service: none
  labels:
    boot: demo-task
    k8s.eip.work/layer: svc
    k8s.eip.work/name: svc-demo-task
    project: qjl
spec:
  selector:
    matchLabels:
      boot: demo-task
      k8s.eip.work/layer: svc
      k8s.eip.work/name: svc-demo-task
      project: qjl
  template:
    metadata:
      labels:
        boot: demo-task
        k8s.eip.work/layer: svc
        k8s.eip.work/name: svc-demo-task
        project: qjl
    spec:
      securityContext:
        seLinuxOptions: {}
      imagePullSecrets: []
      restartPolicy: Always
      initContainers: []
      containers:
        - image: demo/dev-demo-task
          imagePullPolicy: Always
          name: demo-task
          volumeMounts:
            - name: nfs
              readOnly: true
              mountPath: /data/nfs
          resources:
            limits:
            requests:
          env:
            - name: RESTART_
              value: '1582275909'
          readinessProbe:
            httpGet:
              path: /api/ok
              port: 8088
              scheme: HTTP
            initialDelaySeconds: 20
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 100
          livenessProbe:
            httpGet:
              path: /api/ok
              port: 8088
              scheme: HTTP
            initialDelaySeconds: 180
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
      volumes:
        - name: nfs
          nfs:
            server: 192.168.0.144
            path: /data/nfs
      terminationGracePeriodSeconds: 30
  replicas: 1

